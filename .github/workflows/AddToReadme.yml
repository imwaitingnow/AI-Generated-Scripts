name: Auto-Generate Scripts by Site Section

on:
  push:
    paths:
      - 'sites/**'
    branches:
      - main

jobs:
  update-readme:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      # Normalize all directories (deepest-first to avoid parent rename issues)
      - name: Normalize directories
        run: |
          # Use deepest-first order to rename children before parents
          find sites -depth -type d | while read d; do
            # Skip if directory is empty
            if [ -z "$(ls -A "$d")" ]; then
              echo "Removing empty directory: $d"
              rmdir "$d" 2>/dev/null || true
              continue
            fi
            new=$(echo "$d" | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
            if [[ "$d" != "$new" && -d "$d" ]]; then
              echo "Renaming dir $d -> $new"
              mkdir -p "$(dirname "$new")"
              git mv "$d" "$new"
            fi
          done

      # Normalize filenames (spaces and uppercase -> lowercase)
      - name: Normalize filenames
        run: |
          find sites -type f -name "*.user.js" | while read f; do
            new=$(echo "$f" | tr ' ' '-' | tr '[:upper:]' '[:lower:]')
            if [[ "$f" != "$new" && -f "$f" ]]; then
              echo "Renaming file $f -> $new"
              mkdir -p "$(dirname "$new")"
              git mv "$f" "$new"
            fi
          done

      # Build the Scripts by Site section dynamically
      - name: Build Scripts by Site section
        run: |
          section_file=$(mktemp)
          echo "## Scripts by Site🌐" > "$section_file"
          echo "" >> "$section_file"

          # Use sort -u to avoid duplicate directories
          for site in $(find sites -mindepth 1 -maxdepth 1 -type d | sort | while read d; do
            basename "$(echo "$d" | tr '[:upper:]' '[:lower:]')"
          done | sort -u); do
            # Find the actual directory with matching basename (case-insensitive)
            site_dir=$(find sites -mindepth 1 -maxdepth 1 -type d -iname "$site" | head -n 1)
            if [ -z "$site_dir" ]; then
              echo "Skipping non-existent directory: $site"
              continue
            fi
            site_name=$(basename "$site_dir")
            echo "### [${site_name^}](./sites/$site_name)" >> "$section_file"

            find "$site_dir" \( -type d -o -name "*.user.js" \) | sort | while read path; do
              rel=${path#./}
              depth=$(( $(echo "$rel" | grep -o "/" | wc -l) - 1 ))
              indent=$(printf '  %.0s' $(seq 1 $depth))
              if [ -d "$path" ]; then
                name=$(basename "$path")
                [[ "$name" == "$site_name" ]] && continue
                echo "${indent}- **[${name}](./$rel)**" >> "$section_file"
              elif [[ "$path" == *.user.js ]]; then
                name=$(basename "$path")
                display_name=$(grep -m1 "^// @name" "$path" | sed 's|// @name[[:space:]]*||')
                desc=$(grep -m1 "^// @description" "$path" | sed 's|// @description[[:space:]]*||')
                [[ -z "$display_name" ]] && display_name="$name"
                if [ -n "$desc" ]; then
                  echo "${indent}- [${display_name}](./$rel) — ${desc}" >> "$section_file"
                else
                  echo "${indent}- [${display_name}](./$rel)" >> "$section_file"
                fi
              fi
            done
            echo "" >> "$section_file"
          done

          # Replace old section robustly to avoid duplicates
          awk '
            BEGIN {in_section=0; print_section=1}
            /^## Scripts by Site🌐/ {in_section=1; print_section=0; next}
            /^## / && in_section {in_section=0; print_section=1}
            print_section {print}
            END {if (in_section) system("cat '"$section_file"'")}
          ' README.md > README.new
          mv README.new README.md

      # Commit changes if any
      - name: Commit changes
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"
          if git diff --quiet; then
            echo "No changes to commit."
          else
            git add -A
            git commit -m "chore: normalize paths and update Scripts by Site section"
            git push
          fi